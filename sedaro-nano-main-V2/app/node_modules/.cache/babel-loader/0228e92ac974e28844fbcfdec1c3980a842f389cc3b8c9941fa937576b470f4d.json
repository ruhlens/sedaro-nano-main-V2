{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\spruh\\\\Desktop\\\\sedaro-nano-main-V2\\\\sedaro-nano-main-V2\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Plot from 'react-plotly.js';\n\n/**\r\n * UPDATE\r\n * Wrapped parts of the code into functions to make it easier to read.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // Store plot data in state.\n  const [plotData, setPlotData] = useState([]);\n  useEffect(() => {\n    // fetch plot data when the component mounts\n\n    async function fetchData() {\n      console.log('calling fetchdata...');\n      try {\n        // 'data.json' should be populated from a run of sim.py\n        //const response = await fetch('data.json');\n        const response = await fetch('http://127.0.0.1:5000');\n        const data = await response.json();\n        const updatedPlotData = {};\n        data.forEach(([t0, t1, frame]) => {\n          for (let [agentId, {\n            x,\n            y\n          }] of Object.entries(frame)) {\n            updatedPlotData[agentId] = updatedPlotData[agentId] || {\n              x: [],\n              y: []\n            };\n            updatedPlotData[agentId].x.push(x);\n            updatedPlotData[agentId].y.push(y);\n          }\n        });\n        setPlotData(Object.values(updatedPlotData));\n        console.log('plotData:', Object.values(updatedPlotData));\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    }\n    fetchData();\n  }, []);\n  function update() {\n    var style = {\n      position: 'fixed',\n      width: '100%',\n      height: '100%',\n      left: 0,\n      top: 0\n    };\n    var layout = {\n      title: 'Visualization',\n      yaxis: {\n        scaleanchor: 'x'\n      },\n      autosize: true\n    };\n    return /*#__PURE__*/_jsxDEV(Plot, {\n      style: style,\n      data: plotData,\n      layout: layout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 14\n    }, this);\n  }\n  return update();\n};\n_s(App, \"AojEtvuFlf21stQmE5LScnurPRI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Plot","jsxDEV","_jsxDEV","App","_s","plotData","setPlotData","fetchData","console","log","response","fetch","data","json","updatedPlotData","forEach","t0","t1","frame","agentId","x","y","Object","entries","push","values","error","update","style","position","width","height","left","top","layout","title","yaxis","scaleanchor","autosize","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/spruh/Desktop/sedaro-nano-main-V2/sedaro-nano-main-V2/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Plot from 'react-plotly.js';\r\n\r\n/**\r\n * UPDATE\r\n * Wrapped parts of the code into functions to make it easier to read.\r\n */\r\n\r\nconst App = () => {\r\n  // Store plot data in state.\r\n  const [plotData, setPlotData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // fetch plot data when the component mounts\r\n\r\n    async function fetchData() {\r\n      console.log('calling fetchdata...');\r\n\r\n      try {\r\n        // 'data.json' should be populated from a run of sim.py\r\n        //const response = await fetch('data.json');\r\n        const response = await fetch('http://127.0.0.1:5000')\r\n        const data = await response.json();\r\n        const updatedPlotData = {};\r\n\r\n        data.forEach(([t0, t1, frame]) => {\r\n          for (let [agentId, { x, y }] of Object.entries(frame)) {\r\n            updatedPlotData[agentId] = updatedPlotData[agentId] || { x: [], y: [] };\r\n            updatedPlotData[agentId].x.push(x);\r\n            updatedPlotData[agentId].y.push(y);\r\n          }\r\n        });\r\n\r\n        setPlotData(Object.values(updatedPlotData));\r\n        console.log('plotData:', Object.values(updatedPlotData));\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  function update () \r\n    {\r\n      var style = {\r\n        position: 'fixed', width: '100%', height: '100%', left: 0, top: 0 \r\n      }\r\n      var layout = {\r\n        title: 'Visualization',\r\n        yaxis: { scaleanchor: 'x' },\r\n        autosize: true,\r\n      }\r\n      return <Plot\r\n      style={style}\r\n      data={plotData}\r\n      layout={layout}\r\n      />\r\n    }\r\n\r\n  return (update());\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,iBAAiB;;AAElC;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAKA,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd;;IAEA,eAAeS,SAASA,CAAA,EAAG;MACzBC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MAEnC,IAAI;QACF;QACA;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uBAAuB,CAAC;QACrD,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClC,MAAMC,eAAe,GAAG,CAAC,CAAC;QAE1BF,IAAI,CAACG,OAAO,CAAC,CAAC,CAACC,EAAE,EAAEC,EAAE,EAAEC,KAAK,CAAC,KAAK;UAChC,KAAK,IAAI,CAACC,OAAO,EAAE;YAAEC,CAAC;YAAEC;UAAE,CAAC,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACL,KAAK,CAAC,EAAE;YACrDJ,eAAe,CAACK,OAAO,CAAC,GAAGL,eAAe,CAACK,OAAO,CAAC,IAAI;cAAEC,CAAC,EAAE,EAAE;cAAEC,CAAC,EAAE;YAAG,CAAC;YACvEP,eAAe,CAACK,OAAO,CAAC,CAACC,CAAC,CAACI,IAAI,CAACJ,CAAC,CAAC;YAClCN,eAAe,CAACK,OAAO,CAAC,CAACE,CAAC,CAACG,IAAI,CAACH,CAAC,CAAC;UACpC;QACF,CAAC,CAAC;QAEFf,WAAW,CAACgB,MAAM,CAACG,MAAM,CAACX,eAAe,CAAC,CAAC;QAC3CN,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEa,MAAM,CAACG,MAAM,CAACX,eAAe,CAAC,CAAC;MAC1D,CAAC,CAAC,OAAOY,KAAK,EAAE;QACdlB,OAAO,CAACkB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF;IAEAnB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,SAASoB,MAAMA,CAAA,EACb;IACE,IAAIC,KAAK,GAAG;MACVC,QAAQ,EAAE,OAAO;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAE,CAAC;MAAEC,GAAG,EAAE;IAClE,CAAC;IACD,IAAIC,MAAM,GAAG;MACXC,KAAK,EAAE,eAAe;MACtBC,KAAK,EAAE;QAAEC,WAAW,EAAE;MAAI,CAAC;MAC3BC,QAAQ,EAAE;IACZ,CAAC;IACD,oBAAOpC,OAAA,CAACF,IAAI;MACZ4B,KAAK,EAAEA,KAAM;MACbhB,IAAI,EAAEP,QAAS;MACf6B,MAAM,EAAEA;IAAO;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC;EACJ;EAEF,OAAQf,MAAM,CAAC,CAAC;AAClB,CAAC;AAACvB,EAAA,CArDID,GAAG;AAAAwC,EAAA,GAAHxC,GAAG;AAuDT,eAAeA,GAAG;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}