{"ast":null,"code":"import React,{useEffect,useState}from'react';import Plot from'react-plotly.js';/**\r\n * UPDATE\r\n * Wrapped parts of the code into functions to make it easier to read.\r\n */import{jsx as _jsx}from\"react/jsx-runtime\";const App=()=>{// Store plot data in state.\nconst[plotData,setPlotData]=useState([]);useEffect(()=>{// fetch plot data when the component mounts\nasync function fetchData(){console.log('calling fetchdata...');try{// 'data.json' should be populated from a run of sim.py\n//const response = await fetch('data.json');\nconst response=await fetch('http://127.0.0.1:5000');const data=await response.json();const updatedPlotData={};data.forEach(_ref=>{let[t0,t1,frame]=_ref;for(let[agentId,{x,y}]of Object.entries(frame)){updatedPlotData[agentId]=updatedPlotData[agentId]||{x:[],y:[]};updatedPlotData[agentId].x.push(x);updatedPlotData[agentId].y.push(y);}});setPlotData(Object.values(updatedPlotData));console.log('plotData:',Object.values(updatedPlotData));}catch(error){console.error('Error fetching data:',error);}}fetchData();},[]);function update(){var style={position:'fixed',width:'100%',height:'100%',left:0,top:0};var layout={title:'Visualization',yaxis:{scaleanchor:'x'},autosize:true};return/*#__PURE__*/_jsx(Plot,{style:style,data:plotData,layout:layout});}return update();};export default App;","map":{"version":3,"names":["React","useEffect","useState","Plot","jsx","_jsx","App","plotData","setPlotData","fetchData","console","log","response","fetch","data","json","updatedPlotData","forEach","_ref","t0","t1","frame","agentId","x","y","Object","entries","push","values","error","update","style","position","width","height","left","top","layout","title","yaxis","scaleanchor","autosize"],"sources":["C:/Users/spruh/Desktop/sedaro-nano-main-V2/sedaro-nano-main-V2/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Plot from 'react-plotly.js';\r\n\r\n/**\r\n * UPDATE\r\n * Wrapped parts of the code into functions to make it easier to read.\r\n */\r\n\r\nconst App = () => {\r\n  // Store plot data in state.\r\n  const [plotData, setPlotData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // fetch plot data when the component mounts\r\n\r\n    async function fetchData() {\r\n      console.log('calling fetchdata...');\r\n\r\n      try {\r\n        // 'data.json' should be populated from a run of sim.py\r\n        //const response = await fetch('data.json');\r\n        const response = await fetch('http://127.0.0.1:5000')\r\n        const data = await response.json();\r\n        const updatedPlotData = {};\r\n\r\n        data.forEach(([t0, t1, frame]) => {\r\n          for (let [agentId, { x, y }] of Object.entries(frame)) {\r\n            updatedPlotData[agentId] = updatedPlotData[agentId] || { x: [], y: [] };\r\n            updatedPlotData[agentId].x.push(x);\r\n            updatedPlotData[agentId].y.push(y);\r\n          }\r\n        });\r\n\r\n        setPlotData(Object.values(updatedPlotData));\r\n        console.log('plotData:', Object.values(updatedPlotData));\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  function update () \r\n    {\r\n      var style = {\r\n        position: 'fixed', width: '100%', height: '100%', left: 0, top: 0 \r\n      }\r\n      var layout = {\r\n        title: 'Visualization',\r\n        yaxis: { scaleanchor: 'x' },\r\n        autosize: true,\r\n      }\r\n      return <Plot\r\n      style={style}\r\n      data={plotData}\r\n      layout={layout}\r\n      />\r\n    }\r\n\r\n  return (update());\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,IAAI,KAAM,iBAAiB,CAElC;AACA;AACA;AACA,GAHA,OAAAC,GAAA,IAAAC,IAAA,yBAKA,KAAM,CAAAC,GAAG,CAAGA,CAAA,GAAM,CAChB;AACA,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGN,QAAQ,CAAC,EAAE,CAAC,CAE5CD,SAAS,CAAC,IAAM,CACd;AAEA,cAAe,CAAAQ,SAASA,CAAA,CAAG,CACzBC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC,CAEnC,GAAI,CACF;AACA;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,uBAAuB,CAAC,CACrD,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAClC,KAAM,CAAAC,eAAe,CAAG,CAAC,CAAC,CAE1BF,IAAI,CAACG,OAAO,CAACC,IAAA,EAAqB,IAApB,CAACC,EAAE,CAAEC,EAAE,CAAEC,KAAK,CAAC,CAAAH,IAAA,CAC3B,IAAK,GAAI,CAACI,OAAO,CAAE,CAAEC,CAAC,CAAEC,CAAE,CAAC,CAAC,EAAI,CAAAC,MAAM,CAACC,OAAO,CAACL,KAAK,CAAC,CAAE,CACrDL,eAAe,CAACM,OAAO,CAAC,CAAGN,eAAe,CAACM,OAAO,CAAC,EAAI,CAAEC,CAAC,CAAE,EAAE,CAAEC,CAAC,CAAE,EAAG,CAAC,CACvER,eAAe,CAACM,OAAO,CAAC,CAACC,CAAC,CAACI,IAAI,CAACJ,CAAC,CAAC,CAClCP,eAAe,CAACM,OAAO,CAAC,CAACE,CAAC,CAACG,IAAI,CAACH,CAAC,CAAC,CACpC,CACF,CAAC,CAAC,CAEFhB,WAAW,CAACiB,MAAM,CAACG,MAAM,CAACZ,eAAe,CAAC,CAAC,CAC3CN,OAAO,CAACC,GAAG,CAAC,WAAW,CAAEc,MAAM,CAACG,MAAM,CAACZ,eAAe,CAAC,CAAC,CAC1D,CAAE,MAAOa,KAAK,CAAE,CACdnB,OAAO,CAACmB,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC9C,CACF,CAEApB,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,EAAE,CAAC,CAEN,QAAS,CAAAqB,MAAMA,CAAA,CACb,CACE,GAAI,CAAAC,KAAK,CAAG,CACVC,QAAQ,CAAE,OAAO,CAAEC,KAAK,CAAE,MAAM,CAAEC,MAAM,CAAE,MAAM,CAAEC,IAAI,CAAE,CAAC,CAAEC,GAAG,CAAE,CAClE,CAAC,CACD,GAAI,CAAAC,MAAM,CAAG,CACXC,KAAK,CAAE,eAAe,CACtBC,KAAK,CAAE,CAAEC,WAAW,CAAE,GAAI,CAAC,CAC3BC,QAAQ,CAAE,IACZ,CAAC,CACD,mBAAOpC,IAAA,CAACF,IAAI,EACZ4B,KAAK,CAAEA,KAAM,CACbjB,IAAI,CAAEP,QAAS,CACf8B,MAAM,CAAEA,MAAO,CACd,CAAC,CACJ,CAEF,MAAQ,CAAAP,MAAM,CAAC,CAAC,CAClB,CAAC,CAED,cAAe,CAAAxB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}